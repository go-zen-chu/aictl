// Code generated by MockGen. DO NOT EDIT.
// Source: openai.go
//
// Generated by this command:
//
//	mockgen -source=openai.go -destination=mock_openai.go -package=openai
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockGoOpenAIClient is a mock of GoOpenAIClient interface.
type MockGoOpenAIClient struct {
	ctrl     *gomock.Controller
	recorder *MockGoOpenAIClientMockRecorder
}

// MockGoOpenAIClientMockRecorder is the mock recorder for MockGoOpenAIClient.
type MockGoOpenAIClientMockRecorder struct {
	mock *MockGoOpenAIClient
}

// NewMockGoOpenAIClient creates a new mock instance.
func NewMockGoOpenAIClient(ctrl *gomock.Controller) *MockGoOpenAIClient {
	mock := &MockGoOpenAIClient{ctrl: ctrl}
	mock.recorder = &MockGoOpenAIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoOpenAIClient) EXPECT() *MockGoOpenAIClientMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockGoOpenAIClient) CreateChatCompletion(ctx context.Context, req openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", ctx, req)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockGoOpenAIClientMockRecorder) CreateChatCompletion(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockGoOpenAIClient)(nil).CreateChatCompletion), ctx, req)
}
