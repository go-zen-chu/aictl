// Code generated by MockGen. DO NOT EDIT.
// Source: query.go
//
// Generated by this command:
//
//	mockgen -source=query.go -destination=mock_query.go -package=query
//

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsecaseQuery is a mock of UsecaseQuery interface.
type MockUsecaseQuery struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseQueryMockRecorder
}

// MockUsecaseQueryMockRecorder is the mock recorder for MockUsecaseQuery.
type MockUsecaseQueryMockRecorder struct {
	mock *MockUsecaseQuery
}

// NewMockUsecaseQuery creates a new mock instance.
func NewMockUsecaseQuery(ctrl *gomock.Controller) *MockUsecaseQuery {
	mock := &MockUsecaseQuery{ctrl: ctrl}
	mock.recorder = &MockUsecaseQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseQuery) EXPECT() *MockUsecaseQueryMockRecorder {
	return m.recorder
}

// QueryToOpenAI mocks base method.
func (m *MockUsecaseQuery) QueryToOpenAI(query, outputFormat, responseLanguage string, filePaths []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryToOpenAI", query, outputFormat, responseLanguage, filePaths)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryToOpenAI indicates an expected call of QueryToOpenAI.
func (mr *MockUsecaseQueryMockRecorder) QueryToOpenAI(query, outputFormat, responseLanguage, filePaths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryToOpenAI", reflect.TypeOf((*MockUsecaseQuery)(nil).QueryToOpenAI), query, outputFormat, responseLanguage, filePaths)
}

// MockOpenAIClient is a mock of OpenAIClient interface.
type MockOpenAIClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIClientMockRecorder
}

// MockOpenAIClientMockRecorder is the mock recorder for MockOpenAIClient.
type MockOpenAIClientMockRecorder struct {
	mock *MockOpenAIClient
}

// NewMockOpenAIClient creates a new mock instance.
func NewMockOpenAIClient(ctrl *gomock.Controller) *MockOpenAIClient {
	mock := &MockOpenAIClient{ctrl: ctrl}
	mock.recorder = &MockOpenAIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAIClient) EXPECT() *MockOpenAIClientMockRecorder {
	return m.recorder
}

// Ask mocks base method.
func (m *MockOpenAIClient) Ask(ctx context.Context, query, outputFormat, responseLanguage string, textFiles []InputTextFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask", ctx, query, outputFormat, responseLanguage, textFiles)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ask indicates an expected call of Ask.
func (mr *MockOpenAIClientMockRecorder) Ask(ctx, query, outputFormat, responseLanguage, textFiles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockOpenAIClient)(nil).Ask), ctx, query, outputFormat, responseLanguage, textFiles)
}
